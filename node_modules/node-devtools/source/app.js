var log = console.log.bind(console);
var dir = console.dir.bind(console);

process.on('uncaughtException', function(err) {
	dialog.showErrorBox('A JavaScript error occurred in the main process', err.stack);
	app.quit();
});

// shared data between main process and renderer process
var sharedData = global.sharedData = {};

// for compatibility with old version electron
try {
	var electron = require('electron');
	if (typeof electron === 'string') throw new Error();
	var app = electron.app;
	var BrowserWindow = electron.BrowserWindow;
	var dialog = electron.dialog;
	// var protocol = electron.protocol;
} catch (e) {
	var app = require('app');
	var BrowserWindow = require('browser-window');
	var dialog = require('dialog');
	// var protocol = require('protocol');
}

var fs = require('fs');
var path = require('path');
var url = require('url');
var minimist = require('minimist');
var splitArgs = require('../lib/splitArgs.js');

// parse arguments
sharedData.nodePath = process.argv[2];
var args_raw = process.argv.slice(3);
var args_splited = splitArgs(args_raw);
var args_part1 = args_splited.part1;
var args_part2 = args_splited.part2;

sharedData.args_part1 = args_part1;
sharedData.args_part2 = args_part2;

// parse node-devtools options
var args = minimist(args_part1, {
	alias: {
		w: 'watch',
		r: 'reserve',
		v: 'version',
		c: 'context'
	},
	default: {
		w: 0,
		r: false,
		v: false,
		c: 'module'
	}
});

if (args.version) {
	var versions = {
		'node-devtools': require('../package.json').version,
		'electron     ': process.versions.electron,
		'node.js      ': process.versions.node,
		'v8           ': process.versions.v8
	};
	for (var label in versions) log(label + ' v' + versions[label]);
	process.exit(0);
}

// disable cache
app.commandLine.appendSwitch('disable-http-cache');

// add v8 options
var excludedKeys = ['_', 'e', 'w', 'r', 'v', 'c', 'electron', 'watch', 'reserve', 'version', 'context'];
for (var key in args) {
	if (excludedKeys.indexOf(key) >= 0) continue;
	var value = args[key];
	if (value === true) {
		app.commandLine.appendSwitch('js-flags', '--' + key);
	} else {
		app.commandLine.appendSwitch('js-flags', '--' + key + '=' + value);
	}
}

// collect all global variables of node
sharedData.nodeKeys = Object.getOwnPropertyNames(global);
if (args.reserve === true) {
	sharedData.reserve = true;
} else if (typeof args.reserve === 'string') {
	sharedData.reserve = args.reserve.split(/ +/);
} else {
	sharedData.reserve = false;
}

// get entry file and directory
var repl;
var jsFile;
var jsPath;
var script = args_splited.script;

if (script !== null) {
	repl = false;
	jsFile = path.resolve(script);
	jsPath = path.dirname(jsFile);
} else {
	repl = true;
	jsFile = 'Node.js REPL';
	jsPath = process.cwd();
}

sharedData.repl = repl;
sharedData.jsFile = jsFile;
sharedData.jsPath = jsPath;

var title;
if (!repl) {
	// watch file or directory
	var watch = args.watch;
	var watchTarget = '';
	var watchOption = {persistent: false, recursive: true};
	var watchCallback = function(type, filename) {
		if (type === 'change' && isLoading === false) winMain.webContents.reload();
	};

	if (typeof watch === 'number') {
		// watch the entry js file
		if (watch === 1) {
			watchTarget = jsFile;
		// watch the directory of the entry js file
		} else if (watch === 2) {
			watchTarget = jsPath;
		}
	// watch specific file or directory
	} else if (typeof watch === 'string') {
		// resolve relative path to absolute path
		if (/^\.+[\/\\]/.test(watch)) watch = path.resolve(jsPath, watch);
		watch = path.normalize(watch);
		watchTarget = watch;
	}

	title = jsFile;
	if (watchTarget !== '') {
		fs.watch(watchTarget, watchOption, watchCallback);
	}
} else {
	title = 'Node.js REPL';
}

// create browser window
var winMain = null;
var isLoading = false;

app.on('ready', function() {
	winMain = new BrowserWindow({
		show: false,
		width: 200,
		height: 200,
		webPreferences: {
			webgl: false,
			webSecurity: false,
			preload: path.join(__dirname, 'preload-' + (args.context === 'global' ? 'global' : 'module') + '.js')
		}
	});

	winMain.webContents.on('did-start-loading', function() {
		isLoading = true;
	});

	winMain.webContents.on('did-finish-load', function() {
		isLoading = false;
	});

	winMain.webContents.on('devtools-closed', function() {
		winMain.close();
		app.quit();
	});

	winMain.webContents.on('devtools-opened', function() {
		var pageUrl = 'data:text/html,' + title;
		winMain.loadURL ? winMain.loadURL(pageUrl) : winMain.loadUrl(pageUrl);
	});

	winMain.webContents.openDevTools({
		mode: 'detach'
	});
});

